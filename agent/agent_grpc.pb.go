// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AgentManager_GetAgentByName_FullMethodName = "/agent.AgentManager/GetAgentByName"
	AgentManager_GetAgent_FullMethodName       = "/agent.AgentManager/GetAgent"
)

// AgentManagerClient is the client API for AgentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentManagerClient interface {
	GetAgentByName(ctx context.Context, in *GetAgentByNameRequest, opts ...grpc.CallOption) (*Agent, error)
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*Agent, error)
}

type agentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentManagerClient(cc grpc.ClientConnInterface) AgentManagerClient {
	return &agentManagerClient{cc}
}

func (c *agentManagerClient) GetAgentByName(ctx context.Context, in *GetAgentByNameRequest, opts ...grpc.CallOption) (*Agent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentManager_GetAgentByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Agent)
	err := c.cc.Invoke(ctx, AgentManager_GetAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentManagerServer is the server API for AgentManager service.
// All implementations must embed UnimplementedAgentManagerServer
// for forward compatibility
type AgentManagerServer interface {
	GetAgentByName(context.Context, *GetAgentByNameRequest) (*Agent, error)
	GetAgent(context.Context, *GetAgentRequest) (*Agent, error)
	mustEmbedUnimplementedAgentManagerServer()
}

// UnimplementedAgentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAgentManagerServer struct {
}

func (UnimplementedAgentManagerServer) GetAgentByName(context.Context, *GetAgentByNameRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentByName not implemented")
}
func (UnimplementedAgentManagerServer) GetAgent(context.Context, *GetAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedAgentManagerServer) mustEmbedUnimplementedAgentManagerServer() {}

// UnsafeAgentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentManagerServer will
// result in compilation errors.
type UnsafeAgentManagerServer interface {
	mustEmbedUnimplementedAgentManagerServer()
}

func RegisterAgentManagerServer(s grpc.ServiceRegistrar, srv AgentManagerServer) {
	s.RegisterService(&AgentManager_ServiceDesc, srv)
}

func _AgentManager_GetAgentByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).GetAgentByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManager_GetAgentByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).GetAgentByName(ctx, req.(*GetAgentByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManager_GetAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentManager_ServiceDesc is the grpc.ServiceDesc for AgentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentManager",
	HandlerType: (*AgentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentByName",
			Handler:    _AgentManager_GetAgentByName_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AgentManager_GetAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/agent.proto",
}
