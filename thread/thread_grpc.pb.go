// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: thread/thread.proto

package thread

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThreadManager_CreateThread_FullMethodName   = "/thread.ThreadManager/CreateThread"
	ThreadManager_GetThread_FullMethodName      = "/thread.ThreadManager/GetThread"
	ThreadManager_AddMessage_FullMethodName     = "/thread.ThreadManager/AddMessage"
	ThreadManager_GetMessages_FullMethodName    = "/thread.ThreadManager/GetMessages"
	ThreadManager_GetNumMessages_FullMethodName = "/thread.ThreadManager/GetNumMessages"
)

// ThreadManagerClient is the client API for ThreadManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadManagerClient interface {
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMessagesResponse], error)
	GetNumMessages(ctx context.Context, in *GetNumMessagesRequest, opts ...grpc.CallOption) (*GetNumMessagesResponse, error)
}

type threadManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadManagerClient(cc grpc.ClientConnInterface) ThreadManagerClient {
	return &threadManagerClient{cc}
}

func (c *threadManagerClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateThreadResponse)
	err := c.cc.Invoke(ctx, ThreadManager_CreateThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadManagerClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Thread)
	err := c.cc.Invoke(ctx, ThreadManager_GetThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadManagerClient) AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMessageResponse)
	err := c.cc.Invoke(ctx, ThreadManager_AddMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadManagerClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ThreadManager_ServiceDesc.Streams[0], ThreadManager_GetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMessagesRequest, GetMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ThreadManager_GetMessagesClient = grpc.ServerStreamingClient[GetMessagesResponse]

func (c *threadManagerClient) GetNumMessages(ctx context.Context, in *GetNumMessagesRequest, opts ...grpc.CallOption) (*GetNumMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNumMessagesResponse)
	err := c.cc.Invoke(ctx, ThreadManager_GetNumMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadManagerServer is the server API for ThreadManager service.
// All implementations must embed UnimplementedThreadManagerServer
// for forward compatibility.
type ThreadManagerServer interface {
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	GetThread(context.Context, *GetThreadRequest) (*Thread, error)
	AddMessage(context.Context, *AddMessageRequest) (*AddMessageResponse, error)
	GetMessages(*GetMessagesRequest, grpc.ServerStreamingServer[GetMessagesResponse]) error
	GetNumMessages(context.Context, *GetNumMessagesRequest) (*GetNumMessagesResponse, error)
	mustEmbedUnimplementedThreadManagerServer()
}

// UnimplementedThreadManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThreadManagerServer struct{}

func (UnimplementedThreadManagerServer) CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedThreadManagerServer) GetThread(context.Context, *GetThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedThreadManagerServer) AddMessage(context.Context, *AddMessageRequest) (*AddMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedThreadManagerServer) GetMessages(*GetMessagesRequest, grpc.ServerStreamingServer[GetMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedThreadManagerServer) GetNumMessages(context.Context, *GetNumMessagesRequest) (*GetNumMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumMessages not implemented")
}
func (UnimplementedThreadManagerServer) mustEmbedUnimplementedThreadManagerServer() {}
func (UnimplementedThreadManagerServer) testEmbeddedByValue()                       {}

// UnsafeThreadManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadManagerServer will
// result in compilation errors.
type UnsafeThreadManagerServer interface {
	mustEmbedUnimplementedThreadManagerServer()
}

func RegisterThreadManagerServer(s grpc.ServiceRegistrar, srv ThreadManagerServer) {
	// If the following call pancis, it indicates UnimplementedThreadManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThreadManager_ServiceDesc, srv)
}

func _ThreadManager_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadManagerServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadManager_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadManagerServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadManager_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadManagerServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadManager_GetThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadManagerServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadManager_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadManagerServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadManager_AddMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadManagerServer).AddMessage(ctx, req.(*AddMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadManager_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThreadManagerServer).GetMessages(m, &grpc.GenericServerStream[GetMessagesRequest, GetMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ThreadManager_GetMessagesServer = grpc.ServerStreamingServer[GetMessagesResponse]

func _ThreadManager_GetNumMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadManagerServer).GetNumMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadManager_GetNumMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadManagerServer).GetNumMessages(ctx, req.(*GetNumMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreadManager_ServiceDesc is the grpc.ServiceDesc for ThreadManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreadManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thread.ThreadManager",
	HandlerType: (*ThreadManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThread",
			Handler:    _ThreadManager_CreateThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _ThreadManager_GetThread_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _ThreadManager_AddMessage_Handler,
		},
		{
			MethodName: "GetNumMessages",
			Handler:    _ThreadManager_GetNumMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _ThreadManager_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "thread/thread.proto",
}
